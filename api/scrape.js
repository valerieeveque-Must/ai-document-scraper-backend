import { DocumentItem } from '../types';
import { localStorageService } from './localStorageService';

export interface PDFDownloadResult {
  success: boolean;
  fileName?: string;
  fileSize?: number;
  hasChanged?: boolean;
  status?: DocumentItem['status'];
  error?: string;
  downloadUrl?: string;
  isSimulated?: boolean;
}

class PDFDownloadService {
  // CORS headers COMPLETS avec domaine Bolt
  private readonly BACKEND_URL = this.getBackendUrl();

  private getBackendUrl(): string {
    // res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Accept, Origin, X-Requested-With, X-HTTP-Method-Override');
    // D√©tecter si on est en d√©veloppement local
    const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
    
    // Headers suppl√©mentaires pour Bolt
    // res.setHeader('Vary', 'Origin');
    // res.setHeader('X-Content-Type-Options', 'nosniff');
    
    if (isLocal) {
      console.log('üè† Mode d√©veloppement - Backend Vercel');
      return 'https://ai-document-scraper-backend-sznh.vercel.app';
    } else {
      console.log('‚òÅÔ∏è Mode production - Backend Vercel');
      return 'https://ai-document-scraper-backend-sznh.vercel.app';
    }
  }

  /**
   * VRAI SCRAPING via le serveur backend
   */
  async downloadPDF(document: DocumentItem): Promise<PDFDownloadResult> {
    try {
      console.log(`üï∑Ô∏è SCRAPING BACKEND D√âMARR√â`);
      console.log(`üìç URL Source: ${document.sourceUrl}`);
      console.log(`üéØ Type recherch√©: ${document.documentType}`);
      
      // 1. Tester la connexion backend
      const backendAvailable = await this.testBackendConnection();
      
      if (!backendAvailable) {
        console.log('‚ùå Backend non disponible - fallback simulation');
        return this.generateRealisticPDF(document);
      }
      
      // 2. VRAI SCRAPING via backend
      console.log('üï∑Ô∏è Backend disponible - d√©marrage scraping r√©el...');
      
      const scrapeResponse = await fetch(`${this.BACKEND_URL}/api/scrape`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          url: document.sourceUrl,
          documentTypes: [document.documentType]
        })
      });
      
      if (!scrapeResponse.ok) {
        throw new Error(`Erreur scraping: ${scrapeResponse.status} ${scrapeResponse.statusText}`);
      }
      
      const scrapeData = await scrapeResponse.json();
      console.log('üîç R√©sultat scraping:', scrapeData);
      
      if (!scrapeData.success) {
        throw new Error(`Scraping √©chou√©: ${scrapeData.error}`);
      }
      
      if (scrapeData.matchedDocuments.length === 0) {
        console.log('‚ö†Ô∏è Aucun document trouv√© sur la page');
        return {
          success: false,
          error: 'Aucun document correspondant trouv√© sur la page source'
        };
      }
      
      // 3. T√©l√©charger le PDF trouv√©
      const matchedDoc = scrapeData.matchedDocuments[0];
      console.log(`üì• T√©l√©chargement PDF: ${matchedDoc.fileName}`);
      console.log(`üîó URL PDF: ${matchedDoc.url}`);
      
      const downloadResponse = await fetch(`${this.BACKEND_URL}/api/download-pdf`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          pdfUrl: matchedDoc.url,
          fileName: matchedDoc.fileName
        })
      });
      
      if (!downloadResponse.ok) {
        throw new Error(`Erreur t√©l√©chargement: ${downloadResponse.status} ${downloadResponse.statusText}`);
      }
      
      const downloadData = await downloadResponse.json();
      console.log('üìÑ R√©sultat t√©l√©chargement:', downloadData);
      
      if (!downloadData.success) {
        throw new Error(`T√©l√©chargement √©chou√©: ${downloadData.error}`);
      }
      
      // 4. Convertir et t√©l√©charger le PDF
      const pdfBlob = this.base64ToBlob(downloadData.pdfData);
      this.downloadFile(pdfBlob, downloadData.fileName);
      
      console.log(`‚úÖ PDF SCRAP√â ET T√âL√âCHARG√â: ${downloadData.fileName}`);
      
      return {
        success: true,
        fileName: downloadData.fileName,
        fileSize: downloadData.fileSize,
        hasChanged: false,
        status: '√†-jour',
        downloadUrl: matchedDoc.url,
        isSimulated: false
      };
      
    } catch (error) {
      console.error('‚ùå ERREUR SCRAPING BACKEND:', error.message);
      console.error('üìç D√©tails erreur:', error);
      
      // Fallback: g√©n√©rer un PDF de d√©monstration
      console.log('üîÑ FALLBACK: g√©n√©ration PDF de d√©monstration...');
      return this.generateRealisticPDF(document);
    }
  }

  /**
   * G√©n√©rer un PDF r√©aliste avec contenu simul√© mais professionnel
   */
  private async generateRealisticPDF(document: DocumentItem): Promise<PDFDownloadResult> {
    try {
      console.log(`üìÑ G√©n√©ration PDF r√©aliste pour: ${document.documentType}`);
      
      // Simuler un d√©lai de scraping r√©aliste
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const { jsPDF } = await import('jspdf');
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      let yPosition = margin;
      
      // Fonction pour ajouter du texte avec retour √† la ligne
      const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
        pdf.setFontSize(fontSize);
        if (isBold) {
          pdf.setFont(undefined, 'bold');
        } else {
          pdf.setFont(undefined, 'normal');
        }
        
        const lines = pdf.splitTextToSize(text, pageWidth - 2 * margin);
        pdf.text(lines, margin, yPosition);
        yPosition += lines.length * 7 + 5;
      };
      
      // En-t√™te professionnel
      addText(`${document.company.toUpperCase()}`, 18, true);
      addText(`${document.product}`, 16, true);
      yPosition += 10;
      
      addText(`${document.documentType.toUpperCase()}`, 16, true);
      addText(`Version ${document.version}`, 14);
      yPosition += 15;
      
      // Contenu r√©aliste selon le type de document
      const content = this.generateDocumentContent(document);
      content.forEach(section => {
        addText(section.title, 14, true);
        yPosition += 5;
        section.content.forEach(paragraph => {
          addText(paragraph, 11);
          yPosition += 3;
        });
        yPosition += 10;
      });
      
      // Pied de page professionnel
      yPosition += 20;
      pdf.setTextColor(100, 100, 100);
      addText(`Document g√©n√©r√© le ${new Date().toLocaleDateString('fr-FR')}`, 10);
      addText(`Source: ${document.sourceUrl}`, 10);
      addText(`Agent de Surveillance Documentaire IA - Version de d√©monstration`, 10, true);

      const pdfBlob = pdf.output('blob');
      const fileName = `${document.fileName.replace('.pdf', '')}_Simulation.pdf`;
      
      // T√©l√©charger
      this.downloadFile(pdfBlob, fileName);
      
      console.log(`‚úÖ PDF r√©aliste g√©n√©r√©: ${fileName} (${Math.round(pdfBlob.size / 1024)} KB)`);
      
      return {
        success: true,
        fileName: fileName,
        fileSize: pdfBlob.size,
        hasChanged: false,
        status: '√†-jour',
        isSimulated: true,
        downloadUrl: document.sourceUrl
      };
      
    } catch (error) {
      console.error('‚ùå ERREUR SCRAPING BACKEND:', error);
      console.log('üîÑ FALLBACK: g√©n√©ration PDF de d√©monstration...');
      return this.generateRealisticPDF(document);
    }
  }

  /**
   * Scraper et t√©l√©charger un document sp√©cifique
   */
  async scrapeAndDownloadDocument(document: DocumentItem): Promise<PDFDownloadResult> {
    try {
      console.log(`üîç ANALYSE COMPL√àTE: ${document.documentType}`);
      
      const response = await fetch(`${this.BACKEND_URL}/api/analyze-document`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          url: document.sourceUrl,
          documentType: document.documentType
        })
      });
      
      if (!response.ok) {
        throw new Error(`Erreur analyse: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('üìä R√©sultat analyse compl√®te:', data);
      
      if (!data.success) {
        throw new Error(`Analyse √©chou√©e: ${data.error}`);
      }
      
      if (!data.summary.documentDownloaded) {
        return {
          success: false,
          error: 'Document trouv√© mais t√©l√©chargement √©chou√©'
        };
      }
      
      // T√©l√©charger le PDF
      const pdfBlob = this.base64ToBlob(data.pdfData.pdfData);
      this.downloadFile(pdfBlob, data.pdfData.fileName);
      
      return {
        success: true,
        fileName: data.pdfData.fileName,
        fileSize: data.pdfData.fileSize,
        hasChanged: false,
        status: '√†-jour',
        downloadUrl: data.scrapeResult.matchedDocument?.url,
        isSimulated: false
      };
      
    } catch (error) {
      console.error('‚ùå Erreur analyse compl√®te:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur d\'analyse'
      };
    }
  }

  /**
   * Tester la connexion au backend
   */
  async testBackendConnection(): Promise<boolean> {
    try {
      // Si pas d'URL backend configur√©e, retourner false
      if (!this.BACKEND_URL) {
        console.log('‚ùå Pas d\'URL backend configur√©e');
        return false;
      }
      
      console.log(`üîç Test connexion backend: ${this.BACKEND_URL}`);
      
      const response = await fetch(`${this.BACKEND_URL}/api/health`, {
        method: 'GET',
        signal: AbortSignal.timeout(10000),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ Backend Vercel accessible:`, data);
        return true;
      } else {
        console.log(`‚ùå Backend inaccessible: ${response.status} ${response.statusText}`);
        return false;
      }
    } catch (error) {
      console.error(`‚ùå Backend inaccessible:`, error);
      return false;
    }
  }

  /**
   * G√©n√©rer du contenu r√©aliste selon le type de document
   */
  private generateDocumentContent(document: DocumentItem): Array<{title: string, content: string[]}> {
    const type = document.documentType.toLowerCase();
    
    if (type.includes('dic') || type.includes('informations cl√©s')) {
      return [
        {
          title: "INFORMATIONS G√âN√âRALES",
          content: [
            `D√©nomination: SCPI ${document.product}`,
            `Soci√©t√© de gestion: ${document.company}`,
            `Date de cr√©ation: 2010`,
            `Dur√©e de vie: 99 ans`,
            `Capital souscrit: 150 000 000 ‚Ç¨`,
            `Valeur de reconstitution: 200 ‚Ç¨ par part`,
            `Prix de souscription: 200 ‚Ç¨ + droits d'entr√©e 10%`
          ]
        },
        {
          title: "OBJECTIF ET POLITIQUE D'INVESTISSEMENT",
          content: [
            "La SCPI a pour objet l'acquisition et la gestion d'un patrimoine immobilier locatif diversifi√©.",
            "Elle investit principalement dans l'immobilier de bureaux (60%) et de commerces (40%).",
            "Zone g√©ographique: France m√©tropolitaine principalement, avec une exposition europ√©enne limit√©e.",
            "Strat√©gie: Recherche de rendement et de plus-values √† long terme."
          ]
        },
        {
          title: "PROFIL DE RISQUE ET DE RENDEMENT",
          content: [
            "Indicateur de risque: 4 sur une √©chelle de 1 √† 7",
            "Rendement distribu√© 2023: 4,2%",
            "Taux d'occupation financier: 92%",
            "Dur√©e de placement recommand√©e: 8 ans minimum",
            "Risques principaux: Risque de perte en capital, risque de liquidit√©, risque immobilier"
          ]
        }
      ];
    }
    
    if (type.includes('statuts')) {
      return [
        {
          title: "TITRE I - FORME, OBJET, D√âNOMINATION, SI√àGE, DUR√âE",
          content: [
            `Article 1 - Forme: Il est form√© une Soci√©t√© Civile de Placement Immobilier r√©gie par les dispositions du Code mon√©taire et financier.`,
            `Article 2 - Objet: La soci√©t√© a pour objet l'acquisition et la gestion d'un patrimoine immobilier locatif.`,
            `Article 3 - D√©nomination: SCPI ${document.product}`,
            `Article 4 - Si√®ge social: Le si√®ge social est fix√© √† Paris (75008).`,
            `Article 5 - Dur√©e: La dur√©e de la soci√©t√© est fix√©e √† 99 ann√©es.`
          ]
        },
        {
          title: "TITRE II - CAPITAL SOCIAL",
          content: [
            "Article 6 - Le capital social est variable.",
            "Article 7 - Les parts sociales ont une valeur nominale de 100 euros.",
            "Article 8 - Le capital minimum est fix√© √† 760 000 euros.",
            "Article 9 - Le capital maximum est fix√© √† 400 000 000 euros."
          ]
        },
        {
          title: "TITRE III - ADMINISTRATION ET CONTR√îLE",
          content: [
            "Article 10 - La soci√©t√© est administr√©e par une soci√©t√© de gestion agr√©√©e.",
            "Article 11 - Le contr√¥le de la soci√©t√© est exerc√© par un commissaire aux comptes.",
            "Article 12 - Les assembl√©es g√©n√©rales se tiennent au si√®ge social."
          ]
        }
      ];
    }
    
    if (type.includes('bulletin') && type.includes('trimestriel')) {
      return [
        {
          title: "√âDITORIAL",
          content: [
            `Chers associ√©s de la SCPI ${document.product},`,
            "Le trimestre √©coul√© a √©t√© marqu√© par une activit√© soutenue sur le march√© immobilier.",
            "Notre strat√©gie d'investissement continue de porter ses fruits avec des acquisitions cibl√©es.",
            "Les perspectives pour les prochains mois restent favorables malgr√© le contexte √©conomique."
          ]
        },
        {
          title: "ACTIVIT√â DU TRIMESTRE",
          content: [
            "Acquisitions r√©alis√©es: 3 actifs pour un montant total de 15 M‚Ç¨",
            "Cessions: 1 actif pour 8 M‚Ç¨ g√©n√©rant une plus-value de 12%",
            "Taux d'occupation: 94% (en progression de 2 points)",
            "Revenus locatifs: 2,8 M‚Ç¨ (+3% vs trimestre pr√©c√©dent)"
          ]
        },
        {
          title: "R√âSULTATS FINANCIERS",
          content: [
            "R√©sultat distribuable: 1,05 ‚Ç¨ par part",
            "Taux de distribution: 4,2% annualis√©",
            "Valeur de r√©alisation: 205 ‚Ç¨ par part (+2,5% sur l'ann√©e)",
            "Endettement: 25% de l'actif immobilier"
          ]
        }
      ];
    }
    
    // Contenu g√©n√©rique pour autres types
    return [
      {
        title: "PR√âSENTATION",
        content: [
          `Ce document pr√©sente les informations relatives √† ${document.product}.`,
          `Il s'agit d'un ${document.documentType.toLowerCase()} officiel de ${document.company}.`,
          "Les informations contenues sont √† jour √† la date d'√©dition.",
          "Ce document est destin√© aux investisseurs et prospects."
        ]
      },
      {
        title: "INFORMATIONS PRINCIPALES",
        content: [
          `Produit: ${document.product}`,
          `Soci√©t√©: ${document.company}`,
          `Version: ${document.version}`,
          `Derni√®re mise √† jour: ${new Date(document.lastUpdate).toLocaleDateString('fr-FR')}`,
          `Taille du fichier: ${document.fileSize}`
        ]
      },
      {
        title: "AVERTISSEMENT",
        content: [
          "Les performances pass√©es ne pr√©jugent pas des performances futures.",
          "Tout investissement comporte des risques de perte en capital.",
          "Il est recommand√© de consulter un conseiller financier avant tout investissement.",
          "Ce document ne constitue pas une offre de souscription."
        ]
      }
    ];
  }

  // M√©thodes utilitaires
  private base64ToBlob(base64: string): Blob {
    const byteCharacters = atob(base64);
    const byteNumbers = new Array(byteCharacters.length);
    
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    
    const byteArray = new Uint8Array(byteNumbers);
    return new Blob([byteArray], { type: 'application/pdf' });
  }

  private downloadFile(blob: Blob, fileName: string): void {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = fileName;
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    setTimeout(() => {
      URL.revokeObjectURL(url);
    }, 1000);
    
    console.log(`üíæ Fichier t√©l√©charg√©: ${fileName}`);
  }

  private extractVersion(fileName: string): string {
    const patterns = [
      /(\d{4}-\d{2})/,           // 2024-06
      /(\d{4}-Q[1-4])/,          // 2024-Q3
      /v(\d+\.\d+)/,             // v1.2
      /(\d{4})/                  // 2024
    ];

    for (const pattern of patterns) {
      const match = fileName.match(pattern);
      if (match) {
        return match[1];
      }
    }

    return new Date().getFullYear().toString();
  }

  private formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }
}

export const pdfDownloadService = new PDFDownloadService();
